services:
  director:
    container_name: "director"
    build:
      context: ..
      dockerfile: ./dys-svc-director/Dockerfile
    environment:
      - OTEL_ENDPOINT=http://otel-collector:4317
      - RUST_BACKTRACE=1
      - MYSQL_DATABASE=dax_director
    ports:
      - "6081:6081"
    volumes:
      - director-migrations:/migrations
    depends_on:
      run-svc-migrations:
        condition: service_completed_successfully
      valkey:
        condition: service_started
  webapp:
    container_name: "webapp"
    build:
      context: ..
      dockerfile: ./dys-svc-webapp/Dockerfile
    environment:
      - SVC_DIRECTOR_API_BASE_URI=http://director:6081
      - SVC_AUTH_API_BASE_URI=http://auth:6082
      - OTEL_ENDPOINT=http://otel-collector:4317
      - RUST_BACKTRACE=1
    ports:
      - "6080:6080"
    depends_on:
      run-svc-migrations:
        condition: service_completed_successfully
      valkey:
        condition: service_started
  auth:
    container_name: "auth"
    build:
      context: ..
      dockerfile: ./dys-svc-auth/Dockerfile
    environment:
      - OTEL_ENDPOINT=http://otel-collector:4317
      - RUST_BACKTRACE=1
    ports:
      - "6082:6082"
    depends_on:
      run-svc-migrations:
        condition: service_completed_successfully
      valkey:
        condition: service_started
  get-openobserve-secret:
    image: alpine
    command:
      - "/bin/sh"
      - "-c"
      - |
        sed -E "s~endpoint: (_ENDPOINT_)~endpoint: ${OPENOBSERVE_API_ENDPOINT}~g" /opt/otel-collector.yaml > /opt/otel-collector.tmp.yaml
        sed -E "s~Authorization: Basic (_AUTH_)~Authorization: Basic ${OPENOBSERVE_BASIC_AUTH_TOKEN}~g" /opt/otel-collector.tmp.yaml > /opt/otel-collector.tmp2.yaml
        sed -E "s~stream-name: (_STREAM_)~stream-name: dax-dev~g" /opt/otel-collector.tmp2.yaml > /opt/otel-config/config.yaml
    volumes:
      - ./config/otel-collector.yaml:/opt/otel-collector.yaml
      - otelcollector:/opt/otel-config
  otel-collector:
    container_name: "otel-collector"
    image: "otel/opentelemetry-collector-contrib:0.121.0"
    ports:
      - "8888:8888" # Prometheus metrics exposed by the Collector
      - "8889:8889" # Prometheus exporter metrics
      - "13133:13133" # health_check extension
      - "4317:4317" # OTLP gRPC receiver
      - "4318:4318" # OTLP http receiver
    depends_on:
      get-openobserve-secret:
        condition: service_completed_successfully
    volumes:
      - otelcollector:/etc/otelcol-contrib
  # ZJ-TODO: remove
  valkey:
    container_name: "valkey"
    image: "valkey/valkey"
    ports:
      - "6379:6379"
  # ZJ-TODO: remove
  redis-insight:
    container_name: "redis-insight"
    image: "redis/redisinsight"
    ports:
      - "5540:5540"
    volumes:
      - redisinsight:/data
  nats:
    container_name: "nats"
    image: "nats"
    ports:
      - "4222:4222"
      - "6222:6222"
      - "8222:8222"
    command:
      - "--auth"
      - "replaceme"
      - "-m"
      - "8222"
  nats-exporter:
    container_name: "nats-exporter"
    image: "natsio/prometheus-nats-exporter:latest"
    command:
      - "-varz"     # general metrics
      - "-accstatz" # (?) metrics
      - "-connz"    # connection metrics
      - "-gatewayz" # gateway metrics
      - "-healthz"  # health metrics
      - "-leafz"    # leaf metrics
      - "-subz"     # subscription metrics
      - "-jsz=all"  # jetstream metrics (all; no filtering)
      - "http://nats:8222"
  cloudflared:
    container_name: "cloudflared"
    image: "cloudflare/cloudflared"
    command:
      - "tunnel"
      - "--no-autoupdate"
      - "run"
      - "--url"
      - "http://webapp:6080"
      - "--token"
      - "${CLOUDFLARED_TOKEN}"
  mysql:
    container_name: "mysql"
    image: "mysql:9"
    environment:
      - MYSQL_ROOT_PASSWORD=${MYSQL_PASS}
    healthcheck:
      test: mysqladmin ping -h ${MYSQL_HOST} -u${MYSQL_USER} -p${MYSQL_PASS} || exit 1
      interval: 10s
      retries: 5
      timeout: 25s
  run-svc-migrations:
    container_name: "run-svc-migrations"
    image: "rust:1.88-bookworm"
    volumes:
      - director-migrations:/migrations/director:ro
    command:
      - "/bin/bash"
      - "-c"
      - |
        cargo install sqlx-cli

        echo "find results = $(find /migrations -type d -not -name migrations)"
        for migration_dir in $(find /migrations -type d -not -name migrations);
        do
          echo "Running following migrations in $${migration_dir}..."
          database_name=$(echo $${migration_dir} | sed -E "s/\/migrations\/(.*)/\1/g")
          echo "Creating database $${database_name}..."
          echo $(cat $${migration_dir}/*.sql)
          sqlx database create \
            --database-url=mysql://${MYSQL_USER}:${MYSQL_PASS}@${MYSQL_HOST}/dax_$${database_name} \
          || exit 1

          echo "Running migrations..."
          sqlx migrate run \
            --database-url=mysql://${MYSQL_USER}:${MYSQL_PASS}@${MYSQL_HOST}/dax_$${database_name} \
            --source $${migration_dir} \
          || exit 1
        done
        exit 0
    depends_on:
      mysql:
        condition: service_healthy
volumes:
  director-migrations:
  redisinsight:
  otelcollector: